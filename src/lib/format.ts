import type { Wine } from '../types'

// Country code to flag emoji mapping
const COUNTRY_FLAGS: Record<string, string> = {
  'AD': 'ğŸ‡¦ğŸ‡©', 'AE': 'ğŸ‡¦ğŸ‡ª', 'AF': 'ğŸ‡¦ğŸ‡«', 'AG': 'ğŸ‡¦ğŸ‡¬', 'AI': 'ğŸ‡¦ğŸ‡®', 'AL': 'ğŸ‡¦ğŸ‡±', 'AM': 'ğŸ‡¦ğŸ‡²', 'AO': 'ğŸ‡¦ğŸ‡´', 'AQ': 'ğŸ‡¦ğŸ‡¶', 'AR': 'ğŸ‡¦ğŸ‡·',
  'AS': 'ğŸ‡¦ğŸ‡¸', 'AT': 'ğŸ‡¦ğŸ‡¹', 'AU': 'ğŸ‡¦ğŸ‡º', 'AW': 'ğŸ‡¦ğŸ‡¼', 'AX': 'ğŸ‡¦ğŸ‡½', 'AZ': 'ğŸ‡¦ğŸ‡¿', 'BA': 'ğŸ‡§ğŸ‡¦', 'BB': 'ğŸ‡§ğŸ‡§', 'BD': 'ğŸ‡§ğŸ‡©', 'BE': 'ğŸ‡§ğŸ‡ª',
  'BF': 'ğŸ‡§ğŸ‡«', 'BG': 'ğŸ‡§ğŸ‡¬', 'BH': 'ğŸ‡§ğŸ‡­', 'BI': 'ğŸ‡§ğŸ‡®', 'BJ': 'ğŸ‡§ğŸ‡¯', 'BL': 'ğŸ‡§ğŸ‡±', 'BM': 'ğŸ‡§ğŸ‡²', 'BN': 'ğŸ‡§ğŸ‡³', 'BO': 'ğŸ‡§ğŸ‡´', 'BQ': 'ğŸ‡§ğŸ‡¶',
  'BR': 'ğŸ‡§ğŸ‡·', 'BS': 'ğŸ‡§ğŸ‡¸', 'BT': 'ğŸ‡§ğŸ‡¹', 'BV': 'ğŸ‡§ğŸ‡»', 'BW': 'ğŸ‡§ğŸ‡¼', 'BY': 'ğŸ‡§ğŸ‡¾', 'BZ': 'ğŸ‡§ğŸ‡¿', 'CA': 'ğŸ‡¨ğŸ‡¦', 'CC': 'ğŸ‡¨ğŸ‡¨', 'CD': 'ğŸ‡¨ğŸ‡©',
  'CF': 'ğŸ‡¨ğŸ‡«', 'CG': 'ğŸ‡¨ğŸ‡¬', 'CH': 'ğŸ‡¨ğŸ‡­', 'CI': 'ğŸ‡¨ğŸ‡®', 'CK': 'ğŸ‡¨ğŸ‡°', 'CL': 'ğŸ‡¨ğŸ‡±', 'CM': 'ğŸ‡¨ğŸ‡²', 'CN': 'ğŸ‡¨ğŸ‡³', 'CO': 'ğŸ‡¨ğŸ‡´', 'CR': 'ğŸ‡¨ğŸ‡·',
  'CU': 'ğŸ‡¨ğŸ‡º', 'CV': 'ğŸ‡¨ğŸ‡»', 'CW': 'ğŸ‡¨ğŸ‡¼', 'CX': 'ğŸ‡¨ğŸ‡½', 'CY': 'ğŸ‡¨ğŸ‡¾', 'CZ': 'ğŸ‡¨ğŸ‡¿', 'DE': 'ğŸ‡©ğŸ‡ª', 'DJ': 'ğŸ‡©ğŸ‡¯', 'DK': 'ğŸ‡©ğŸ‡°', 'DM': 'ğŸ‡©ğŸ‡²',
  'DO': 'ğŸ‡©ğŸ‡´', 'DZ': 'ğŸ‡©ğŸ‡¿', 'EC': 'ğŸ‡ªğŸ‡¨', 'EE': 'ğŸ‡ªğŸ‡ª', 'EG': 'ğŸ‡ªğŸ‡¬', 'EH': 'ğŸ‡ªğŸ‡­', 'ER': 'ğŸ‡ªğŸ‡·', 'ES': 'ğŸ‡ªğŸ‡¸', 'ET': 'ğŸ‡ªğŸ‡¹', 'FI': 'ğŸ‡«ğŸ‡®',
  'FJ': 'ğŸ‡«ğŸ‡¯', 'FK': 'ğŸ‡«ğŸ‡°', 'FM': 'ğŸ‡«ğŸ‡²', 'FO': 'ğŸ‡«ğŸ‡´', 'FR': 'ğŸ‡«ğŸ‡·', 'GA': 'ğŸ‡¬ğŸ‡¦', 'GB': 'ğŸ‡¬ğŸ‡§', 'GD': 'ğŸ‡¬ğŸ‡©', 'GE': 'ğŸ‡¬ğŸ‡ª', 'GF': 'ğŸ‡¬ğŸ‡«',
  'GG': 'ğŸ‡¬ğŸ‡¬', 'GH': 'ğŸ‡¬ğŸ‡­', 'GI': 'ğŸ‡¬ğŸ‡®', 'GL': 'ğŸ‡¬ğŸ‡±', 'GM': 'ğŸ‡¬ğŸ‡²', 'GN': 'ğŸ‡¬ğŸ‡³', 'GP': 'ğŸ‡¬ğŸ‡µ', 'GQ': 'ğŸ‡¬ğŸ‡¶', 'GR': 'ğŸ‡¬ğŸ‡·', 'GS': 'ğŸ‡¬ğŸ‡¸',
  'GT': 'ğŸ‡¬ğŸ‡¹', 'GU': 'ğŸ‡¬ğŸ‡º', 'GW': 'ğŸ‡¬ğŸ‡¼', 'GY': 'ğŸ‡¬ğŸ‡¾', 'HK': 'ğŸ‡­ğŸ‡°', 'HM': 'ğŸ‡­ğŸ‡²', 'HN': 'ğŸ‡­ğŸ‡³', 'HR': 'ğŸ‡­ğŸ‡·', 'HT': 'ğŸ‡­ğŸ‡¹', 'HU': 'ğŸ‡­ğŸ‡º',
  'ID': 'ğŸ‡®ğŸ‡©', 'IE': 'ğŸ‡®ğŸ‡ª', 'IL': 'ğŸ‡®ğŸ‡±', 'IM': 'ğŸ‡®ğŸ‡²', 'IN': 'ğŸ‡®ğŸ‡³', 'IO': 'ğŸ‡®ğŸ‡´', 'IQ': 'ğŸ‡®ğŸ‡¶', 'IR': 'ğŸ‡®ğŸ‡·', 'IS': 'ğŸ‡®ğŸ‡¸', 'IT': 'ğŸ‡®ğŸ‡¹',
  'JE': 'ğŸ‡¯ğŸ‡ª', 'JM': 'ğŸ‡¯ğŸ‡²', 'JO': 'ğŸ‡¯ğŸ‡´', 'JP': 'ğŸ‡¯ğŸ‡µ', 'KE': 'ğŸ‡°ğŸ‡ª', 'KG': 'ğŸ‡°ğŸ‡¬', 'KH': 'ğŸ‡°ğŸ‡­', 'KI': 'ğŸ‡°ğŸ‡®', 'KM': 'ğŸ‡°ğŸ‡²', 'KN': 'ğŸ‡°ğŸ‡³',
  'KP': 'ğŸ‡°ğŸ‡µ', 'KR': 'ğŸ‡°ğŸ‡·', 'KW': 'ğŸ‡°ğŸ‡¼', 'KY': 'ğŸ‡°ğŸ‡¾', 'KZ': 'ğŸ‡°ğŸ‡¿', 'LA': 'ğŸ‡±ğŸ‡¦', 'LB': 'ğŸ‡±ğŸ‡§', 'LC': 'ğŸ‡±ğŸ‡¨', 'LI': 'ğŸ‡±ğŸ‡®', 'LK': 'ğŸ‡±ğŸ‡°',
  'LR': 'ğŸ‡±ğŸ‡·', 'LS': 'ğŸ‡±ğŸ‡¸', 'LT': 'ğŸ‡±ğŸ‡¹', 'LU': 'ğŸ‡±ğŸ‡º', 'LV': 'ğŸ‡±ğŸ‡»', 'LY': 'ğŸ‡±ğŸ‡¾', 'MA': 'ğŸ‡²ğŸ‡¦', 'MC': 'ğŸ‡²ğŸ‡¨', 'MD': 'ğŸ‡²ğŸ‡©', 'ME': 'ğŸ‡²ğŸ‡ª',
  'MF': 'ğŸ‡²ğŸ‡«', 'MG': 'ğŸ‡²ğŸ‡¬', 'MH': 'ğŸ‡²ğŸ‡­', 'MK': 'ğŸ‡²ğŸ‡°', 'ML': 'ğŸ‡²ğŸ‡±', 'MM': 'ğŸ‡²ğŸ‡²', 'MN': 'ğŸ‡²ğŸ‡³', 'MO': 'ğŸ‡²ğŸ‡´', 'MP': 'ğŸ‡²ğŸ‡µ', 'MQ': 'ğŸ‡²ğŸ‡¶',
  'MR': 'ğŸ‡²ğŸ‡·', 'MS': 'ğŸ‡²ğŸ‡¸', 'MT': 'ğŸ‡²ğŸ‡¹', 'MU': 'ğŸ‡²ğŸ‡º', 'MV': 'ğŸ‡²ğŸ‡»', 'MW': 'ğŸ‡²ğŸ‡¼', 'MX': 'ğŸ‡²ğŸ‡½', 'MY': 'ğŸ‡²ğŸ‡¾', 'MZ': 'ğŸ‡²ğŸ‡¿', 'NA': 'ğŸ‡³ğŸ‡¦',
  'NC': 'ğŸ‡³ğŸ‡¨', 'NE': 'ğŸ‡³ğŸ‡ª', 'NF': 'ğŸ‡³ğŸ‡«', 'NG': 'ğŸ‡³ğŸ‡¬', 'NI': 'ğŸ‡³ğŸ‡®', 'NL': 'ğŸ‡³ğŸ‡±', 'NO': 'ğŸ‡³ğŸ‡´', 'NP': 'ğŸ‡³ğŸ‡µ', 'NR': 'ğŸ‡³ğŸ‡·', 'NU': 'ğŸ‡³ğŸ‡º',
  'NZ': 'ğŸ‡³ğŸ‡¿', 'OM': 'ğŸ‡´ğŸ‡²', 'PA': 'ğŸ‡µğŸ‡¦', 'PE': 'ğŸ‡µğŸ‡ª', 'PF': 'ğŸ‡µğŸ‡«', 'PG': 'ğŸ‡µğŸ‡¬', 'PH': 'ğŸ‡µğŸ‡­', 'PK': 'ğŸ‡µğŸ‡°', 'PL': 'ğŸ‡µğŸ‡±', 'PM': 'ğŸ‡µğŸ‡²',
  'PN': 'ğŸ‡µğŸ‡³', 'PR': 'ğŸ‡µğŸ‡·', 'PS': 'ğŸ‡µğŸ‡¸', 'PT': 'ğŸ‡µğŸ‡¹', 'PW': 'ğŸ‡µğŸ‡¼', 'PY': 'ğŸ‡µğŸ‡¾', 'QA': 'ğŸ‡¶ğŸ‡¦', 'RE': 'ğŸ‡·ğŸ‡ª', 'RO': 'ğŸ‡·ğŸ‡´', 'RS': 'ğŸ‡·ğŸ‡¸',
  'RU': 'ğŸ‡·ğŸ‡º', 'RW': 'ğŸ‡·ğŸ‡¼', 'SA': 'ğŸ‡¸ğŸ‡¦', 'SB': 'ğŸ‡¸ğŸ‡§', 'SC': 'ğŸ‡¸ğŸ‡¨', 'SD': 'ğŸ‡¸ğŸ‡©', 'SE': 'ğŸ‡¸ğŸ‡ª', 'SG': 'ğŸ‡¸ğŸ‡¬', 'SH': 'ğŸ‡¸ğŸ‡­', 'SI': 'ğŸ‡¸ğŸ‡®',
  'SJ': 'ğŸ‡¸ğŸ‡¯', 'SK': 'ğŸ‡¸ğŸ‡°', 'SL': 'ğŸ‡¸ğŸ‡±', 'SM': 'ğŸ‡¸ğŸ‡²', 'SN': 'ğŸ‡¸ğŸ‡³', 'SO': 'ğŸ‡¸ğŸ‡´', 'SR': 'ğŸ‡¸ğŸ‡·', 'SS': 'ğŸ‡¸ğŸ‡¸', 'ST': 'ğŸ‡¸ğŸ‡¹', 'SV': 'ğŸ‡¸ğŸ‡»',
  'SX': 'ğŸ‡¸ğŸ‡½', 'SY': 'ğŸ‡¸ğŸ‡¾', 'SZ': 'ğŸ‡¸ğŸ‡¿', 'TC': 'ğŸ‡¹ğŸ‡¨', 'TD': 'ğŸ‡¹ğŸ‡©', 'TF': 'ğŸ‡¹ğŸ‡«', 'TG': 'ğŸ‡¹ğŸ‡¬', 'TH': 'ğŸ‡¹ğŸ‡­', 'TJ': 'ğŸ‡¹ğŸ‡¯', 'TK': 'ğŸ‡¹ğŸ‡°',
  'TL': 'ğŸ‡¹ğŸ‡±', 'TM': 'ğŸ‡¹ğŸ‡²', 'TN': 'ğŸ‡¹ğŸ‡³', 'TO': 'ğŸ‡¹ğŸ‡´', 'TR': 'ğŸ‡¹ğŸ‡·', 'TT': 'ğŸ‡¹ğŸ‡¹', 'TV': 'ğŸ‡¹ğŸ‡»', 'TW': 'ğŸ‡¹ğŸ‡¼', 'TZ': 'ğŸ‡¹ğŸ‡¿', 'UA': 'ğŸ‡ºğŸ‡¦',
  'UG': 'ğŸ‡ºğŸ‡¬', 'UM': 'ğŸ‡ºğŸ‡²', 'US': 'ğŸ‡ºğŸ‡¸', 'UY': 'ğŸ‡ºğŸ‡¾', 'UZ': 'ğŸ‡ºğŸ‡¿', 'VA': 'ğŸ‡»ğŸ‡¦', 'VC': 'ğŸ‡»ğŸ‡¨', 'VE': 'ğŸ‡»ğŸ‡ª', 'VG': 'ğŸ‡»ğŸ‡¬', 'VI': 'ğŸ‡»ğŸ‡®',
  'VN': 'ğŸ‡»ğŸ‡³', 'VU': 'ğŸ‡»ğŸ‡º', 'WF': 'ğŸ‡¼ğŸ‡«', 'WS': 'ğŸ‡¼ğŸ‡¸', 'YE': 'ğŸ‡¾ğŸ‡ª', 'YT': 'ğŸ‡¾ğŸ‡¹', 'ZA': 'ğŸ‡¿ğŸ‡¦', 'ZM': 'ğŸ‡¿ğŸ‡²', 'ZW': 'ğŸ‡¿ğŸ‡¼'
}

// US state code to name mapping
const US_STATES: Record<string, string> = {
  'AL': 'AL', 'AK': 'AK', 'AZ': 'AZ', 'AR': 'AR', 'CA': 'CA', 'CO': 'CO', 'CT': 'CT', 'DE': 'DE', 'FL': 'FL', 'GA': 'GA',
  'HI': 'HI', 'ID': 'ID', 'IL': 'IL', 'IN': 'IN', 'IA': 'IA', 'KS': 'KS', 'KY': 'KY', 'LA': 'LA', 'ME': 'ME', 'MD': 'MD',
  'MA': 'MA', 'MI': 'MI', 'MN': 'MN', 'MS': 'MS', 'MO': 'MO', 'MT': 'MT', 'NE': 'NE', 'NV': 'NV', 'NH': 'NH', 'NJ': 'NJ',
  'NM': 'NM', 'NY': 'NY', 'NC': 'NC', 'ND': 'ND', 'OH': 'OH', 'OK': 'OK', 'OR': 'OR', 'PA': 'PA', 'RI': 'RI', 'SC': 'SC',
  'SD': 'SD', 'TN': 'TN', 'TX': 'TX', 'UT': 'UT', 'VT': 'VT', 'VA': 'VA', 'WA': 'WA', 'WV': 'WV', 'WI': 'WI', 'WY': 'WY',
  'DC': 'DC'
}

// Special regions that use appellation in display name
const SPECIAL_REGIONS = ['Bordeaux']

/**
 * Formats a wine name for display based on the wine's properties
 */
export function displayWineName(w: Wine): string {
  const vintage = w.vintage ? w.vintage.toString() : 'NV'
  
  // If region is special (like Bordeaux) and appellation is present
  if (w.region && SPECIAL_REGIONS.includes(w.region) && w.appellation) {
    return `${w.producer} â€” ${w.appellation} â€” ${vintage}`
  }
  
  // If wine_name is present
  if (w.wine_name) {
    return `${w.producer} â€” ${w.wine_name} â€” ${vintage}`
  }
  
  // If vineyard is present
  if (w.vineyard) {
    return `${w.producer} â€” ${w.vineyard} â€” ${vintage}`
  }
  
  // Default case
  return `${w.producer} â€” ${vintage}`
}

/**
 * Returns the country flag emoji for a given country code
 */
export function countryFlag(code?: string): string {
  if (!code) return ''
  return COUNTRY_FLAGS[code.toUpperCase()] || ''
}

/**
 * Returns the US state badge for a given state code
 */
export function stateBadge(code?: string): string {
  if (!code) return ''
  return US_STATES[code.toUpperCase()] || ''
}

/**
 * Formats bottle size with proper units (e.g., "750ml" â†’ "750 mL")
 */
export function formatSize(size?: string): string {
  if (!size) return ''
  
  // Normalize common variations
  const normalized = size.toLowerCase().trim()
  
  // Handle different formats
  if (normalized.includes('ml')) {
    const number = normalized.replace('ml', '').trim()
    return `${number} mL`
  }
  
  if (normalized.includes('l') && !normalized.includes('ml')) {
    const number = normalized.replace('l', '').trim()
    return `${number} L`
  }
  
  // If it's just a number, assume mL
  if (/^\d+$/.test(normalized)) {
    return `${normalized} mL`
  }
  
  return size // Return as-is if we can't parse it
}

/**
 * Returns country name for a given country code
 */
export function countryName(code?: string): string {
  if (!code) return 'Unknown'
  // This is a simplified mapping - you might want to expand this
  const countryNames: Record<string, string> = {
    'US': 'United States',
    'FR': 'France',
    'IT': 'Italy',
    'ES': 'Spain',
    'DE': 'Germany',
    'AU': 'Australia',
    'NZ': 'New Zealand',
    'CA': 'Canada',
    'CH': 'Switzerland',
    'AT': 'Austria',
    'PT': 'Portugal',
    'AR': 'Argentina',
    'CL': 'Chile',
    'ZA': 'South Africa',
  }
  return countryNames[code.toUpperCase()] || code
}

/**
 * Displays wine title with standardized format: "Producer â€¢ Wine Name â€¢ Vintage"
 */
export function displayWineTitle(w: Wine): string {
  const vintage = w.vintage ? w.vintage.toString() : 'NV'
  const wineName = w.wine_name || ''
  
  // Standardized format: Producer â€¢ Wine Name â€¢ Vintage
  if (wineName) {
    return `${w.producer} â€¢ ${wineName} â€¢ ${vintage}`
  }
  
  // If no wine name, just Producer â€¢ Vintage
  return `${w.producer} â€¢ ${vintage}`
}

/**
 * Displays wine title for hero header (simplified)
 */
export function displayTitle(w: Wine): string {
  const vintage = w.vintage ? w.vintage.toString() : 'NV'
  return `${w.producer} â€” ${vintage}`.trim()
}

/**
 * Formats date to short month + year (e.g., "Sep 2025")
 */
export function formatDate(dateString?: string): string {
  if (!dateString) return ''
  
  try {
    const date = new Date(dateString)
    return date.toLocaleDateString('en-US', { 
      month: 'short', 
      year: 'numeric' 
    })
  } catch {
    return dateString
  }
}
